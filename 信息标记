
	* 信息的标记
  
    * 标记后的信息可形成信息组织结构，增加了信息维度
		* 标记后的信息可用于通信、存储或展示
		* 标记的结构与信息一样具有重要价值
		* 标记后的信息更利于程序理解和运用
    
	* HTML的信息标记
  
		* HTML通过预定义的<>...</>标签形式组织不同类型的信息
    
	* 信息标记的三种形式
  
		* XML：eXtensible Markup Language
			* 用<>标签表达信息
				* <img src="china.jpg" size="10"> ... </img>
				* 空元素的缩写形式 <img src="china.jpg" size="10" />
				* 注释书写形式<!-- This is a comment, very useful -->
        
		* JSON：JavaScript Object Notation
			* 有类型的键值对 key: value
				* "key": "value"
				* "key": ["value1", "value2"]
				* "key": {"subkey": "subvalue"}
        
		* YAML：YAML Ain't Markup Language
			* 无类型键值对 key: value
				* 用 - 表达并列
				* 用 | 表达整块数据，# 表示注释
				* key: value
				* key: #Comment
          -value1
          -value2
				* key:
          subkey: subvalue
          
		* 三种信息标记形式的比较
			* XML：最早的通用信息标记语言，可扩展性好，但繁琐；Internet上的信息交互与传递
			* JSON：信息有类型，适合程序处理（js），较XML简洁；移动应用云端和节点的信息通信，无注释
			* YAML：信息无类型，文本信息比例最高，可读性好；各类系统的配置文件，有注释易读
      
	* 信息提取的一般方法

		* 方法一：完整解析信息的标记形式，再提取关键信息
			* XML JSON YAML
			* 需要标记解析器，如：bs4库的标签树遍历
			* 优点：信息解析准确
			* 确定：提取过程繁琐，速度慢
      
		* 方法二：无视标记形式，直接搜索关键信息
			* 搜索
			* 对信息的文本查找函数即可
			* 优点：提取过程简洁，速度较快
			* 缺点：提取结果准确性与信息内容相关
      
		* 融合方法：结合形式解析和搜索方法，提取关键信息
			* XML JSON YAML 搜索
			* 需要标记解析器及文本查找函数

